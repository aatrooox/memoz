// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  uid          String        @unique
  email        String?
  username     String        @unique
  nickname     String?
  password     String
  avatar_url   String?
  role         String        @default("user")
  comments     Comments[]
  memos        Memo[]
  sub_comments SubComments[]
  likes        Likes[]
  tags         Tag[]

  @@map("b_users")
}

model Memo {
  id               Int                @id @default(autoincrement())
  uid              String             @unique
  content          String
  create_ts        DateTime           @default(now())
  updated_ts       DateTime           @updatedAt
  visible          String             @default("public") // 可见性 public / group / private 
  defalt_floded    Boolean            @default(false) // 默认折起
  flod_tip         String? // 折起时，在标题栏展示折起的原因
  user_id          Int
  user_info        User               @relation(fields: [user_id], references: [id], onDelete: NoAction)
  tags             MemoTagRelations[]
  comments         Comments[]
  likes            Likes[]

  @@map("b_memo")
}

// 一级评论: 针对文章和动态的第一级评论
model Comments {
  id           Int           @id @default(autoincrement())
  uid          String        @unique
  content      String
  create_ts    DateTime      @default(now())
  updated_ts   DateTime      @updatedAt
  type         String        @default("article") // article / memo / blog
  memo_id      Int?
  memo_info    Memo?        @relation(fields: [memo_id], references: [id])
  user_id      Int
  user_info    User          @relation(fields: [user_id], references: [id], onDelete: NoAction)
  sub_comments SubComments[] // 一对多的二级评论
  likes        Likes[]

  @@map("b_comments")
}

model Tag {
  id               Int                @id @default(autoincrement())
  tag_name         String             @unique
  create_ts        DateTime           @default(now())
  updated_ts       DateTime           @updatedAt
  user_id          Int
  user_info        User               @relation(fields: [user_id], references: [id], onDelete: NoAction)
  memos            MemoTagRelations[]

  @@map("b_tag")
}

model MemoTagRelations {
  tagId  Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: NoAction)
  memoId Int
  memo   Memo @relation(fields: [memoId], references: [id], onDelete: NoAction)
  create_ts        DateTime           @default(now())
  updated_ts       DateTime           @updatedAt
  
  @@id([tagId, memoId])
  @@map("memo_tag_relations")
}

// 二级评论: 针对一级评论的回复. 以及评论的回复
// 每条二级评论, 必须存顶级的评论id comment_id
// 扁平化: 每条评论包含评论的是谁
model SubComments {
  id                   Int      @id @default(autoincrement())
  uid                  String   @unique
  content              String
  create_ts            DateTime @default(now())
  updated_ts           DateTime @updatedAt
  comment_id           Int
  // 如果一级评论删除了，则删除所有二级评论
  comment_info         Comments @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  reply_sub_comment_id Int?
  user_id              Int
  user_info            User     @relation(fields: [user_id], references: [id], onDelete: NoAction)
  memo_id              Int?
  likes                Likes[]

  @@map("b_sub_comments")
}

model Likes {
  id               Int          @id @default(autoincrement())
  create_ts        DateTime     @default(now())
  updated_ts       DateTime     @updatedAt
  target           String       @default("article") // article / memo / comment / subcomment
  memo_id          Int?
  memo_info        Memo?       @relation(fields: [memo_id], references: [id])
  sub_comment_id   Int?
  sub_comment_info SubComments? @relation(fields: [sub_comment_id], references: [id])
  comment_id       Int?
  comment_info     Comments?    @relation(fields: [comment_id], references: [id])
  user_id          Int
  user_info        User         @relation(fields: [user_id], references: [id], onDelete: NoAction)

  @@map("b_likes")
}
